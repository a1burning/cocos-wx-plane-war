{"version":3,"sources":["assets/Script/PlayerControl.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\n * 创建一个玩家，拖拽飞机资源到层级编辑器，然后拖拽飞机到屏幕中间。\n * 现在需要给飞机添加左右拖拽的效果，\n * 创建一个脚本PlayerControl.ts，将脚本挂载到飞机上\n * 双击脚本编写移动的逻辑\n * \n * 创建完子弹脚本之后，这里要进行攻击的逻辑\n * 首先要加入计时器schedule，每隔0.5s间就创建一个子弹\n * 然后需要将子弹创建一个预设体\n * 在脚本中添加一个property，然后将预设体拖拽到PlayerControl属性上\n * 然后编写攻击的逻辑\n * \n * 在敌人脚本写完die的方法之后，需要在玩家这里开启碰撞检测功能\n */\nimport EnemyManager from \"./EnemyManager\";\nimport ScoreControl from \"./ScoreControl\";\nimport BtnManager from \"./BtnManager\";\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class PlayerControl extends cc.Component {\n    @property(cc.Prefab)\n    bulletPre: cc.Prefab = null;\n\n    start () {\n        // 移动\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, (event) => {\n            // 触摸移动\n            // event.getLocation() 获取当前触摸点的位置\n            // this.node.setPosition 设置飞机的位置\n            this.node.setPosition(event.getLocation());\n        });\n\n        // 攻击 计时器\n        // this.schedule(callback, interval, repeat, delay);\n        // callback 回调函数\n        // interval 间隔时间 - 秒\n        // repeat 重复次数，默认一直重复\n        // delay 延迟时间 - 秒（如果设置为0，则开始瞬间就会调用）\n        this.schedule(() => {\n            // 创建子弹\n            // cc.instantiate 创建一个预设体\n            let bullet = cc.instantiate(this.bulletPre);\n            // 设置父物体\n            // cc.director.getScene() 获取当前场景\n            // bullet.setParent 设置子弹的父物体\n            bullet.setParent(cc.director.getScene());\n            // 设置子弹的位置\n            bullet.x = this.node.x;\n            // 设置子弹的y坐标\n            // this.node.y 获取飞机的y坐标, 飞机的高度是81，所以这里加60\n            bullet.y = this.node.y + 60;\n        }, 0.5);\n\n        // 开启碰撞检测\n        cc.director.getCollisionManager().enabled = true;\n    }\n\n    // 碰撞检测方法，other是敌人\n    onCollisionEnter(other, self) {\n        // 如果碰到敌人，销毁自己，让敌人死亡\n        // 在敌人的碰撞组件中，添加tag为1，表示是敌人\n        if(other.tag == 1) {\n            // 不让敌人再创建\n            // 获取敌人管理的脚本，调用敌人管理的脚本的stop方法\n            const enemyManagerNode = cc.director.getScene().getChildByName('enemyManager');\n            enemyManagerNode && enemyManagerNode.getComponent(EnemyManager).stop();\n            // 销毁自己\n            this.die();\n        }\n    }\n\n    // 销毁自己\n    die() {\n        // 动态加载爆炸图片\n        cc.loader.loadRes('hero1_die', cc.SpriteFrame, (err, spriteFrame) => {\n            // 将爆炸图片设置到自己节点上\n            // 得到自己节点的Sprite组件，然后设置spriteFrame\n            this.node.getComponent(cc.Sprite).spriteFrame = spriteFrame;\n            // 300ms后销毁\n            setTimeout(() => {\n                this.node.destroy();\n                // 展示最终分数\n                const scoreNode = cc.director.getScene().getChildByName('score');\n                scoreNode && scoreNode.getComponent(ScoreControl).stop();\n                // 展示按钮\n                const btnNode = cc.director.getScene().getChildByName('btn');\n                btnNode && btnNode.getComponent(BtnManager).show();\n            }, 300);\n        })\n    }\n\n    update (dt) {}\n}\n"]}